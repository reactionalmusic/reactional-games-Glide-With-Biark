using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Reactional.Demo
{
    public class IntrumentOverrideTest : MonoBehaviour
    {
        [Range(0, 1)]
        public float pulseRate = 1f;

        [Range(0, 1)]
        public float pitch = 1f;

        [Range(0, 1)]
        public float dynamics = 1f;

        public bool active = false;

        public string instrument = "";

        [Range(0, 1)]
        public float legato = 1f;
        IEnumerator Start()
        {
            while (!Reactional.Playback.Theme.IsLoaded())
            {
                yield return new WaitForSeconds(1);
            }
            List<string> instruments = new List<string>();
            instruments = Reactional.Playback.Theme.GetOverridableInstruments();
            foreach (string instrument in instruments)
            {
                Debug.Log(instrument);
            }
            instrument = instruments[0];
        }

        void Update()
        {
            if (Reactional.Setup.AllowPlay)
            {

                Reactional.Playback.Theme.InstrumentOverride(instrument, pulseRate, pitch, dynamics, active, legato);

                // This function will override a sampler instrument of the current playing theme.
                // The instrument name must be one of the overridable instruments of the current theme.
                // The pulseRate, pitch, dynamics, active, and legato values must be between 0 and 1.
                // pulseRate is the rate at which the instrument will generate notes.
                // pitch is the approximated range of pitches generated by the instrument.
                // dynamics is the volume of the notes generated by the instrument.
                // active is a boolean that determines if the instrument is active.
                // legato = 1 means that a note is only generated if it is different from the previous note.
                // legato = 0 means that a note is generated at every pulse.

            }
        }
    }
}